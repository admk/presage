package presage;

import com.jeta.forms.components.separator.TitledSeparator;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;

import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;

public class AddMethodDialog extends JPanel implements TreeSelectionListener
{
	
	private static final long serialVersionUID = 1L;
	
   JTree m_InspectorJTree = new JTree();
   JPanel m_ParameterPanel = new JPanel();
   JButton m_AddButton = new JButton();
   JButton m_CancelButton = new JButton();
   JTextField m_jtextfield1 = new JTextField();

   // For the dynamic parameter fields
	JTextField[] parameterfields;
	
	ScriptElement se;
   
   
   /**
    * Default constructor
    */
   public AddMethodDialog()
   {
      initializePanel();
   }

   
   private class PackageInfo {
		public String packageName;
		// public Method[] methods;

		public PackageInfo(String packageName){ // , Method[] methods) {
			this.packageName = packageName;
			// this.methods = methods;
		}

		public String toString() {
			return packageName;
		}
	}

	private class ClassInfo {
		public String className;
		// public Method[] methods;

		public ClassInfo(String className){ // , Method[] methods) {
			this.className = className;
			// this.methods = methods;
		}

		public String toString() {
			return className;
		}
	}

	private class MethodInfo {
		public String className;
		public String methodName;
		public Class<?>[] parameterclasses;
		public String[] parameternames;

		public MethodInfo(String className, String methodname, Class<?>[] parameterclasses, String[] parameternames) {
			this.className = className;
			this.methodName = methodname;
			this.parameterclasses = parameterclasses;
			this.parameternames = parameternames;
		}

		public MethodInfo(String className, String methodname, Class<?>[] parameterclasses) {
			this.className = className;
			this.methodName = methodname;
			this.parameterclasses = parameterclasses;
			this.parameternames = new String[parameterclasses.length];
			for (int i = 0; i < this.parameternames.length; i++){
				this.parameternames[i] = "arg" + i;
			}

		}

		public String toString() {
			return methodName + "(" + printparameters() + ");";
		}

		public String printparameters(){

			String parameterString = "";

			for (int i = 0; i < parameterclasses.length; i++){
				parameterString = parameterString + parameterclasses[i].getSimpleName() + " " + parameternames[i] + ", ";
			}

			if (parameterString.length() >= 2)
				parameterString  = parameterString.substring(0, parameterString.length()-2);

			return parameterString;
		}
	}
	
	/** Required by TreeSelectionListener interface. */
	public void valueChanged(TreeSelectionEvent e) {

		DefaultMutableTreeNode node = (DefaultMutableTreeNode)m_InspectorJTree.getLastSelectedPathComponent();

		if (node == null) return;

		Object nodeInfo = node.getUserObject();
		if (node.isLeaf() && nodeInfo.getClass().equals(MethodInfo.class)) {
			MethodInfo method = (MethodInfo)nodeInfo;
			m_ParameterPanel.removeAll();
			
			m_ParameterPanel.setLayout(new GridLayout(0,2));

			parameterfields = new JTextField[method.parameterclasses.length];

			for (int i = 0; i < method.parameterclasses.length; i++){

				JLabel label = new JLabel(method.parameterclasses[i].getSimpleName() + "  "+ method.parameternames[i] + " = ", JLabel.TRAILING);      	
				m_ParameterPanel.add(label);
				JTextField field = new JTextField();
				// field.setSize(new Dimension(90, 30));	
				label.setLabelFor(field);
				m_ParameterPanel.add(field);
				parameterfields[i] = field;

			}

			// m_ParameterPanel.setVisible(true);
			this.revalidate();
			this.repaint();

			System.out.println("Method Selected");



		} else { // i.e. its a class not method
			m_ParameterPanel.removeAll();
			m_ParameterPanel.add(new JLabel("Select a method"));    
			this.revalidate();
			this.repaint();
		}

	}

	
	private ScriptElement makeScriptElement(){
		DefaultMutableTreeNode node = (DefaultMutableTreeNode)m_InspectorJTree.getLastSelectedPathComponent();

		// show an info box?
		if (node == null){
			JOptionPane.showMessageDialog(null, "You must select a method, then input parameter values and execution time.", "Information", JOptionPane.INFORMATION_MESSAGE);
			return null;
		}

		Object nodeInfo = node.getUserObject();
		if (node.isLeaf()) {
			if(nodeInfo.getClass().equals(MethodInfo.class)){
				MethodInfo method = (MethodInfo)nodeInfo;

				Object[] parametervalues = new Object[method.parameterclasses.length]; 

				for (int i = 0; i < parameterfields.length; i++){

					Class<?> c = method.parameterclasses[i];

					try {
					if (c.equals(int.class)){
						parametervalues[i] = Integer.parseInt(parameterfields[i].getText());
					} else if (c.equals(double.class)){
						parametervalues[i] = Double.parseDouble(parameterfields[i].getText());
					} else if (c.equals(float.class)){
						parametervalues[i] = Float.parseFloat(parameterfields[i].getText());
					} else if (c.equals(boolean.class)){
						parametervalues[i] =Boolean.parseBoolean(parameterfields[i].getText());
					} else {
						try{
							Constructor<?> ct = c.getConstructor(new Class[]{String.class});
							parametervalues[i] = ct.newInstance(new Object[]{parameterfields[i].getText()});

						} catch (Exception e){
							System.err.println(method.className +"."+ method.methodName + " must only contain parameter types int, double, float, boolean or those which have a constructor which accepts a String failed on parameter " + method.parameternames[i] + " class = " + c.getName() );
							JOptionPane.showMessageDialog(this, "Error creating parameter objects. Could not construct " + c.getSimpleName() + " "+ method.parameternames[i] + " with value = " + parameterfields[i].getText(), "Error", JOptionPane.ERROR_MESSAGE);
							return null;
						}
					}
					} catch (NumberFormatException e){
						System.err.println(method.className +"."+ method.methodName + " must only contain parameter types int, double, float, boolean or those which have a constructor which accepts a String failed on parameter " + method.parameternames[i] + " class = " + c.getName() );
						JOptionPane.showMessageDialog(this, "Error creating parameter objects. Could not construct " + c.getSimpleName() + " "+ method.parameternames[i] + " with value = " + parameterfields[i].getText(), "Error", JOptionPane.ERROR_MESSAGE);
						return null;
					}
				}
		
				int execycle;
				
				if (m_jtextfield1.getText().equalsIgnoreCase("")){
					execycle = 10; // Simulation.cycle + 1;
				} else {
					try{
						execycle = Integer.parseInt(m_jtextfield1.getText());
					} catch (NumberFormatException e){
						JOptionPane.showMessageDialog(this, "Execution time incorrectly specified.", "Error", JOptionPane.ERROR_MESSAGE);
						return null;
					}
				} 
				
				if (execycle < 0){
					JOptionPane.showMessageDialog(this, "Execution time incorrectly specified. Negative values not allowed.", "Error", JOptionPane.ERROR_MESSAGE);
					return null;
				}
				
//				for (int i = 0; i < parametervalues.length; i++)
//					System.out.println(parametervalues[i].toString());
				
				se = new ScriptElement(execycle, method.className, method.methodName, method.parameterclasses, method.parameternames, parametervalues);

				System.out.println(se.toString());
				
				return se;
				
			} else {
				JOptionPane.showMessageDialog(this, "Your selection is not a method.", "Information", JOptionPane.INFORMATION_MESSAGE);
				return null;

			}
		} else {
			JOptionPane.showMessageDialog(this, "Your selection is not a method.", "Information", JOptionPane.INFORMATION_MESSAGE);
			return null;

		}
		
	}

	private void handleMethods(Class<?> c, String className, DefaultMutableTreeNode top){


		//get methods from the Class object
		Method m[] = c.getDeclaredMethods();

		for (int i = 0; i < m.length; i++) {

			if (( Modifier.isStatic( m[i].getModifiers() ) ) && ( Modifier.isPublic(m[i].getModifiers() )) ) {

				// would be nice to be able to get the parameter names but its not a standard java function 
				MethodInfo minf = new MethodInfo(className, m[i].getName(), m[i].getParameterTypes());

				System.out.println("Method Found: " + minf.toString() );

				DefaultMutableTreeNode methodnode = new DefaultMutableTreeNode(minf);
				top.add(methodnode);		
			}
		}
	}

	private void handleFolder(String path, DefaultMutableTreeNode top){

		// DefaultMutableTreeNode packagenode = null;
		// DefaultMutableTreeNode classnode = null;
		// DefaultMutableTreeNode methodnode = null;

		// get the build folder
		File toF = new File(path);
		// and a list of everything in it
		File[] files = toF.listFiles();

		try {
			for (int i = 0; i < files.length; i++) {
				// if its a file check if its a class file!
				if (files[i].isFile()) {
					String ext = StringParseTools.extensionForFilename(files[i].getName());
					if (ext.equalsIgnoreCase("class")){

						// add to list of class files!
						// System.out.println("Class Found: " + files[i].getName());
						String temp = path + "/" +  StringParseTools.readTokens(files[i].getName(), ".")[0];
						temp = temp.replace("bin/","");
						temp = temp.replace('/','.');
						temp = temp.substring(1, temp.length());

						System.out.print("Class Found: " + temp);

						try{
							Class<?> c = Class.forName(temp);

							// need to check if it implements ScriptExecutableMethods						
							Class[] interfaces = c.getInterfaces();	

							if (interfaces.length == 0){
								System.out.println( " : does not implement presage.ScriptExecutableMethods");
							} else { 

								for (int j = 0; j < interfaces.length; j++){

									if (interfaces[j].equals(Class.forName("presage.ScriptExecutableMethods")) ){

										System.out.println( " : implements presage.ScriptExecutableMethods");

										DefaultMutableTreeNode classnode = new DefaultMutableTreeNode(new ClassInfo(files[i].getName()));
										top.add(classnode);			

										// now need to add the methods availible!
										//try {
										handleMethods(c, temp, classnode);
									}
								}
							}


						} catch (ClassNotFoundException e){
							System.err.println("" + e);
						}

					}
				} else if (files[i].isDirectory()) { 
					System.out.println("Package Found: " + files[i].getName() + " " + files[i].getName());
					DefaultMutableTreeNode packagenode = new DefaultMutableTreeNode(new PackageInfo(files[i].getName()));
					top.add(packagenode);
					// if its a folder you recursivly call this method with the path.
					handleFolder(path + "/" + files[i].getName(), packagenode);
				}
			}
		} catch (NullPointerException e) {
			System.err.println("MethodAddForm: " + e);
		}

	}
	
	private void createNodes(DefaultMutableTreeNode top) {
		String path = "bin/";	
		handleFolder(path, top);
	}

   
   
   /**
    * Main method for panel
    */
   public static void main(String[] args)
   {
      JFrame frame = new JFrame();
      frame.setSize(600, 400);
      frame.setLocation(100, 100);
      frame.getContentPane().add(new AddMethodDialog());
      frame.setVisible(true);

      frame.addWindowListener( new WindowAdapter()
      {
         public void windowClosing( WindowEvent evt )
         {
            System.exit(0);
         }
      });
   }

   /**
    * Adds fill components to empty cells in the first row and first column of the grid.
    * This ensures that the grid spacing will be the same as shown in the designer.
    * @param cols an array of column indices in the first row where fill components should be added.
    * @param rows an array of row indices in the first column where fill components should be added.
    */
   void addFillComponents( Container panel, int[] cols, int[] rows )
   {
      Dimension filler = new Dimension(10,10);

      boolean filled_cell_11 = false;
      CellConstraints cc = new CellConstraints();
      if ( cols.length > 0 && rows.length > 0 )
      {
         if ( cols[0] == 1 && rows[0] == 1 )
         {
            /** add a rigid area  */
            panel.add( Box.createRigidArea( filler ), cc.xy(1,1) );
            filled_cell_11 = true;
         }
      }

      for( int index = 0; index < cols.length; index++ )
      {
         if ( cols[index] == 1 && filled_cell_11 )
         {
            continue;
         }
         panel.add( Box.createRigidArea( filler ), cc.xy(cols[index],1) );
      }

      for( int index = 0; index < rows.length; index++ )
      {
         if ( rows[index] == 1 && filled_cell_11 )
         {
            continue;
         }
         panel.add( Box.createRigidArea( filler ), cc.xy(1,rows[index]) );
      }

   }

   /**
    * Helper method to load an image file from the CLASSPATH
    * @param imageName the package and name of the file to load relative to the CLASSPATH
    * @return an ImageIcon instance with the specified image file
    * @throws IllegalArgumentException if the image resource cannot be loaded.
    */
   public ImageIcon loadImage( String imageName )
   {
      try
      {
         ClassLoader classloader = getClass().getClassLoader();
         java.net.URL url = classloader.getResource( imageName );
         if ( url != null )
         {
            ImageIcon icon = new ImageIcon( url );
            return icon;
         }
      }
      catch( Exception e )
      {
         e.printStackTrace();
      }
      throw new IllegalArgumentException( "Unable to load image: " + imageName );
   }

   public JPanel createPanel()
   {
      JPanel jpanel1 = new JPanel();
      FormLayout formlayout1 = new FormLayout("FILL:4DLU:NONE,FILL:DEFAULT:GROW(1.0),FILL:75PX:NONE,FILL:4DLU:NONE,FILL:75PX:NONE,FILL:75PX:GROW(1.0),FILL:4DLU:NONE","CENTER:2DLU:NONE,CENTER:DEFAULT:NONE,CENTER:2DLU:NONE,FILL:DEFAULT:GROW(1.0),FILL:DEFAULT:NONE,CENTER:DEFAULT:NONE,CENTER:DEFAULT:NONE,CENTER:2DLU:NONE,FILL:DEFAULT:NONE,CENTER:2DLU:NONE,CENTER:DEFAULT:NONE,CENTER:2DLU:NONE,CENTER:DEFAULT:NONE,CENTER:2DLU:NONE,CENTER:DEFAULT:NONE,CENTER:DEFAULT:NONE,CENTER:2DLU:NONE");
      CellConstraints cc = new CellConstraints();
      jpanel1.setLayout(formlayout1);

      DefaultMutableTreeNode top = new DefaultMutableTreeNode("Your Source");

		createNodes(top);

		m_InspectorJTree = new JTree(top);

		m_InspectorJTree.addTreeSelectionListener(this);
      
      
      m_InspectorJTree.setName("InspectorJTree");
      JScrollPane jscrollpane1 = new JScrollPane();
      jscrollpane1.setViewportView(m_InspectorJTree);
      jscrollpane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
      jscrollpane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
      jpanel1.add(jscrollpane1,cc.xywh(2,4,5,3));

      m_ParameterPanel.setName("ParameterPanel");
      jpanel1.add(m_ParameterPanel,cc.xywh(2,9,5,1));

      TitledSeparator titledseparator1 = new TitledSeparator();
      titledseparator1.setText("Step 1: Select Class implementing ScriptExecutableMethods interface from Tree:");
      jpanel1.add(titledseparator1,cc.xywh(2,2,5,1));

      TitledSeparator titledseparator2 = new TitledSeparator();
      titledseparator2.setText("Step 2: Enter Method Parameters");
      jpanel1.add(titledseparator2,cc.xywh(2,7,5,1));

      TitledSeparator titledseparator3 = new TitledSeparator();
      titledseparator3.setText("Step 3: Enter Method  Execution Time");
      jpanel1.add(titledseparator3,cc.xywh(2,11,5,1));

      m_AddButton.setActionCommand("Add");
      m_AddButton.setName("AddButton");
      m_AddButton.setText("Add");
      jpanel1.add(m_AddButton,cc.xy(3,16));
      
  	m_AddButton.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent ae) {
			JButton s = (JButton) ae.getSource();

			ScriptElement sme = makeScriptElement();
			
			
		}	
	});

      m_CancelButton.setActionCommand("Cancel");
      m_CancelButton.setName("CancelButton");
      m_CancelButton.setText("Cancel");
      jpanel1.add(m_CancelButton,cc.xy(5,16));

      TitledSeparator titledseparator4 = new TitledSeparator();
      titledseparator4.setText("Step 4: Click Add");
      jpanel1.add(titledseparator4,cc.xywh(2,15,5,1));

      JLabel jlabel1 = new JLabel();
      jlabel1.setText("Simulation Cycle (Blank for next cycle):\n");
      jlabel1.setHorizontalAlignment(JLabel.RIGHT);
      jpanel1.add(jlabel1,cc.xywh(2,13,2,1));

      jpanel1.add(m_jtextfield1,cc.xywh(5,13,2,1));

      addFillComponents(jpanel1,new int[]{ 1,2,3,4,5,6,7 },new int[]{ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17 });
      return jpanel1;
   }
   
   
   

   /**
    * Initializer
    */
   protected void initializePanel()
   {
      setLayout(new BorderLayout());
      add(createPanel(), BorderLayout.CENTER);
   }


}
